'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _templateObject = _taggedTemplateLiteral(['\n  border-radius: ', ';\n  border: 0;\n  display: inline-block;\n  font-weight: ', ';\n  font-family: inherit;\n  cursor: pointer;\n  background-color: ', ';\n  color: ', ';\n  ', ' ', ';\n  &:hover {\n    background-color: ', ';\n  }\n'], ['\n  border-radius: ', ';\n  border: 0;\n  display: inline-block;\n  font-weight: ', ';\n  font-family: inherit;\n  cursor: pointer;\n  background-color: ', ';\n  color: ', ';\n  ', ' ', ';\n  &:hover {\n    background-color: ', ';\n  }\n']);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _styledComponents = require('styled-components');

var _styledComponents2 = _interopRequireDefault(_styledComponents);

var _styledSystem = require('styled-system');

var _theme = require('./theme');

var _theme2 = _interopRequireDefault(_theme);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

var ToggleBadge = _styledComponents2.default.button(_templateObject, function (props) {
  return props.theme.radius;
}, function (props) {
  return props.theme.bold;
}, function (props) {
  return props.selected ? props.theme.colors[props.bg] : props.unSelectedBg;
}, function (props) {
  return props.theme.colors[props.color];
}, _styledSystem.space, _styledSystem.fontSize, function (props) {
  return props.theme.colors[props.bg];
});

ToggleBadge.displayName = 'ToggleBadge';

ToggleBadge.propTypes = _extends({
  selected: _propTypes2.default.bool
}, _styledSystem.propTypes.space, _styledSystem.propTypes.fontSize, _styledSystem.propTypes.color);

ToggleBadge.defaultProps = {
  selected: false,
  px: 2,
  py: 1,
  mx: 1,
  my: 1,
  fontSize: 0,
  theme: _theme2.default,
  color: 'blue',
  bg: 'lightBlue',
  unSelectedBg: 'transparent'
};

exports.default = ToggleBadge;
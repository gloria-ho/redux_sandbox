'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _templateObject = _taggedTemplateLiteral(['\n  & ', ' {\n    pointer-events: none;\n  }\n'], ['\n  & ', ' {\n    pointer-events: none;\n  }\n']),
    _templateObject2 = _taggedTemplateLiteral(['\n  from {\n    opacity: 0;\n  }\n\n  to {\n    opacity: 1;\n  }\n'], ['\n  from {\n    opacity: 0;\n  }\n\n  to {\n    opacity: 1;\n  }\n']);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _styledComponents = require('styled-components');

var _styledComponents2 = _interopRequireDefault(_styledComponents);

var _Box = require('./Box');

var _Box2 = _interopRequireDefault(_Box);

var _Flex = require('./Flex');

var _Flex2 = _interopRequireDefault(_Flex);

var _Text = require('./Text');

var _Text2 = _interopRequireDefault(_Text);

var _Icon = require('./Icon');

var _Icon2 = _interopRequireDefault(_Icon);

var _Label = require('./Label');

var _Label2 = _interopRequireDefault(_Label);

var _Input = require('./Input');

var _Input2 = _interopRequireDefault(_Input);

var _theme = require('./theme');

var _theme2 = _interopRequireDefault(_theme);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

var Root = (0, _styledComponents2.default)(_Box2.default)(_templateObject, _Box2.default);

var fadeIn = (0, _styledComponents.keyframes)(_templateObject2);
var labelStyles = {
  animation: fadeIn + ' 0.3s'
};

var getInputStyles = function getInputStyles(showLabel) {
  return showLabel ? {
    paddingTop: '20px',
    paddingBottom: '8px',
    transition: 'padding-top 0.1s, padding-bottom 0.1s'
  } : {
    paddingTop: '14px',
    paddingBottom: '14px',
    transition: 'padding-top 0.1s, padding-bottom 0.1s'
  };
};

var InputField = function (_React$Component) {
  _inherits(InputField, _React$Component);

  function InputField(props) {
    _classCallCheck(this, InputField);

    var _this = _possibleConstructorReturn(this, (InputField.__proto__ || Object.getPrototypeOf(InputField)).call(this, props));

    _this.onInputChange = function (event) {
      _this.setState({
        showLabel: event.target.value
      });

      _this.props.onChange(event);
    };

    var hasInitialValue = void 0;

    _react2.default.Children.forEach(props.children, function (child) {
      if (child && child.type === _Input2.default) {
        hasInitialValue = !!child.props.value;
      }
    });

    _this.state = {
      showLabel: hasInitialValue
    };
    return _this;
  }

  _createClass(InputField, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          label = _props.label,
          icon = _props.icon,
          children = _props.children,
          onChange = _props.onChange,
          props = _objectWithoutProperties(_props, ['label', 'icon', 'children', 'onChange']);

      var InputChild = void 0;
      var inputPosition = -1;
      var LabelChild = void 0;
      var BeforeIcon = void 0;
      var AfterIcon = void 0;
      var inputId = void 0;
      var inputPlaceholder = void 0;
      var iconAdjustment = void 0;

      _react2.default.Children.forEach(children, function (child, index) {
        if (child) {
          if (child.type === _Label2.default) {
            LabelChild = child;
          }
          if (child.type === _Input2.default) {
            inputPosition = index;
            InputChild = child;
            inputId = child.props.id;
            // For aria-label when Label child is not rendered
            inputPlaceholder = child.props.placeholder;
          }
          if (child.type === _Icon2.default) {
            if (inputPosition < 0) {
              BeforeIcon = child;
              iconAdjustment = child.props.size - 24;
            } else {
              AfterIcon = child;
            }
          }
        }
      });

      // Handle old version on component's api
      if (icon) {
        AfterIcon = _react2.default.createElement(_Icon2.default, { name: icon });
      }
      if (label) {
        LabelChild = _react2.default.createElement(
          _Label2.default,
          null,
          label
        );
      }
      if (!InputChild) {
        InputChild = _react2.default.createElement(_Input2.default, null);
      }

      var showLabel = this.props.alwaysShowLabel || LabelChild && this.state.showLabel;

      return _react2.default.createElement(
        Root,
        null,
        showLabel && _react2.default.cloneElement(LabelChild, {
          pl: BeforeIcon ? 40 : 2,
          mt: '6px',
          style: labelStyles,
          htmlFor: inputId
        }),
        _react2.default.createElement(
          _Flex2.default,
          { align: 'center', width: 1, mt: 0 },
          BeforeIcon && _react2.default.createElement(
            _Box2.default,
            {
              mr: -4,
              ml: 8 - iconAdjustment + 'px',
              mt: showLabel ? '-12px' : '2px'
            },
            BeforeIcon
          ),
          _react2.default.cloneElement(InputChild, _extends({
            'aria-label': !showLabel && inputPlaceholder ? inputPlaceholder : null,
            mt: showLabel && -20,
            pl: BeforeIcon ? 40 : 2,
            pr: AfterIcon && 40,
            style: getInputStyles(showLabel),
            onChange: this.onInputChange,
            width: 1,
            innerRef: function innerRef(elem) {
              _this2.inputRef = elem;
            }
          }, props)),
          AfterIcon && _react2.default.createElement(
            _Box2.default,
            { ml: -4, mt: showLabel ? -12 : 2 },
            AfterIcon
          )
        )
      );
    }
  }]);

  return InputField;
}(_react2.default.Component);

InputField.propTypes = {
  onChange: _propTypes2.default.func.isRequired,
  alwaysShowLabel: _propTypes2.default.bool,
  children: function children(props, propName, componentName) {
    var prop = props[propName];
    var inputCount = 0;
    var inputPosition = 0;
    var labelCount = 0;
    var firstIconPosition = -1;
    var secondIconPosition = 999;
    var iconCount = 0;
    _react2.default.Children.forEach(prop, function (child, index) {
      if (child === null) return;
      switch (child.type) {
        case _Input2.default:
          inputPosition = index;
          inputCount++;
          break;
        case _Icon2.default:
          if (iconCount === 0) {
            firstIconPosition = index;
          } else {
            secondIconPosition = index;
          }
          iconCount++;
          break;
        case _Label2.default:
          labelCount++;
          break;
        default:
          return new Error('\'' + child.type + '\' is not a valid child for \'' + componentName + '\'');
      }
    });

    if (!inputCount) {
      return new Error('No \'Input\' child found for \'' + componentName + '\'. Please update your component to use the compound version of this component and pass an \'Input\' component as the child');
    }
    if (labelCount > 1) {
      return new Error('Exactly 0 or 1 \'Label\' children should be supplied to \'' + componentName + '\'');
    }
    if (iconCount > 2) {
      return new Error('Up to 2 \'Icon\' children are supported by \'' + componentName + '\'');
    }
    if (iconCount === 2 && (firstIconPosition > inputPosition || secondIconPosition < inputPosition)) {
      return new Error('If 2 \'Icons\' are provided, the \'Input\' component must be positioned between them as children of \'' + componentName + '\'');
    }
  }
};

exports.default = InputField;
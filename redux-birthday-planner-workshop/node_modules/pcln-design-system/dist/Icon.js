'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _templateObject = _taggedTemplateLiteral(['\n  flex: none;\n  ', ' ', ';\n'], ['\n  flex: none;\n  ', ' ', ';\n']);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _styledComponents = require('styled-components');

var _styledComponents2 = _interopRequireDefault(_styledComponents);

var _styledSystem = require('styled-system');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _icons = require('../icons.json');

var _icons2 = _interopRequireDefault(_icons);

var _theme = require('./theme');

var _theme2 = _interopRequireDefault(_theme);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

// Should be removed eventually after v1.0.0
var aliases = {
  scrollLeft: 'chevronLeft',
  chevronLight: 'chevronDown',
  chevronThick: 'chevronDownThick',
  // aliases for breaking changes from #153
  // should add propType warnings similar to the color name deprecation getters
  box: 'boxEmpty',
  car: 'cars',
  cruise: 'cruises',
  description: 'document',
  hotel: 'hotels',
  allInclusive: 'inclusive',
  radioFilled: 'radioChecked',
  radio: 'radioEmpty',
  add: 'radioPlus',
  minus: 'radioMinus',
  businessSeat: 'seatBusiness',
  economySeat: 'seatEconomy',
  plane: 'flights'
};

var getPath = function getPath(_ref) {
  var name = _ref.name,
      legacy = _ref.legacy;

  if (!legacy) {
    return _icons2.default[name] || _icons2.default.legacy[name];
  }
  return _icons2.default.legacy[name] || _icons2.default[name] || _icons2.default[aliases[name]];
};

// Remove `space` props from the `svg` element prevents react warnings
var CleanSvg = (0, _styledSystem.cleanElement)('svg');
CleanSvg.propTypes = _extends({}, _styledSystem.propTypes.space);

var Base = function Base(_ref2) {
  var name = _ref2.name,
      size = _ref2.size,
      legacy = _ref2.legacy,
      props = _objectWithoutProperties(_ref2, ['name', 'size', 'legacy']);

  var icon = getPath({ name: name, legacy: legacy });
  if (!icon) return false;

  return _react2.default.createElement(
    CleanSvg,
    _extends({}, props, {
      viewBox: icon.viewBox,
      width: size,
      height: size,
      fill: 'currentcolor'
    }),
    _react2.default.createElement('path', { d: icon.path })
  );
};

var Icon = (0, _styledComponents2.default)(Base)(_templateObject, _styledSystem.space, _styledSystem.color);

Icon.displayName = 'Icon';

Icon.defaultProps = {
  name: 'checkLight',
  size: 24,
  legacy: true,
  theme: _theme2.default
};

var allKeys = Object.keys(_extends({}, _icons2.default, _icons2.default.legacy, aliases));

Icon.propTypes = {
  name: function name(_ref3) {
    var _name = _ref3.name;

    if (aliases[_name] && !_icons2.default[_name] && !_icons2.default.legacy[_name]) {
      console.warn('Using \'' + _name + '\' as an Icon name has been deprecated. Use \'' + aliases[_name] + '\' instead.');
    }

    if (!allKeys.includes(_name)) {
      return new Error('Failed prop type: Invalid prop name of value \'' + _name + '\' supplied to Icon, expected one of ' + allKeys.toString() + ' is expected');
    }
  },
  size: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
  legacy: _propTypes2.default.bool,
  color: _propTypes2.default.string
};

exports.default = Icon;
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _templateObject = _taggedTemplateLiteral(['\n  border-radius: 99999px;\n  display: inline-block;\n  font-size: ', 'px;\n  font-weight: 600;\n  text-transform: uppercase;\n  letter-spacing: ', ';\n  ', ' ', ' ', ';\n'], ['\n  border-radius: 99999px;\n  display: inline-block;\n  font-size: ', 'px;\n  font-weight: 600;\n  text-transform: uppercase;\n  letter-spacing: ', ';\n  ', ' ', ' ', ';\n']);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _styledComponents = require('styled-components');

var _styledComponents2 = _interopRequireDefault(_styledComponents);

var _styledSystem = require('styled-system');

var _theme = require('./theme');

var _theme2 = _interopRequireDefault(_theme);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

var type = function type(props) {
  var badgeColors = {
    blue: {
      backgroundColor: props.theme.colors.blue,
      color: props.theme.colors.white
    },
    lightBlue: {
      backgroundColor: props.theme.colors.lightBlue,
      color: props.theme.colors.darkBlue
    },
    green: {
      backgroundColor: props.theme.colors.green,
      color: props.theme.colors.white
    },
    lightGreen: {
      backgroundColor: props.theme.colors.lightGreen,
      color: props.theme.colors.darkGreen
    },
    red: {
      backgroundColor: props.theme.colors.red,
      color: props.theme.colors.white
    },
    lightRed: {
      backgroundColor: props.theme.colors.lightRed,
      color: props.theme.colors.darkRed
    },
    orange: {
      backgroundColor: props.theme.colors.orange,
      color: props.theme.colors.text
    },
    lightOrange: {
      backgroundColor: props.theme.colors.lightOrange,
      color: props.theme.colors.darkOrange
    },
    gray: {
      backgroundColor: props.theme.colors.gray,
      color: props.theme.colors.white
    },
    lightGray: {
      backgroundColor: props.theme.colors.lightGray,
      color: props.theme.colors.text
    }
  };
  return !(props.bg && props.color) && (badgeColors[props.bg] || badgeColors.lightGray);
};

var Badge = _styledComponents2.default.div(_templateObject, function (props) {
  return props.theme.fontSizes[0];
}, (0, _styledSystem.theme)('letterSpacings.caps'), _styledSystem.space, type, _styledSystem.color);

Badge.displayName = 'Badge';

var numberStringOrArray = _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string, _propTypes2.default.array]);

Badge.propTypes = {
  bg: _propTypes2.default.string,
  px: numberStringOrArray,
  py: numberStringOrArray
};

Badge.defaultProps = {
  px: 2,
  py: 1,
  theme: _theme2.default
};

exports.default = Badge;
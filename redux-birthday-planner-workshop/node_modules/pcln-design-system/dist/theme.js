'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var createMediaQuery = function createMediaQuery(n) {
  return '@media screen and (min-width:' + n + 'em)';
};

var addAliases = function addAliases(arr, aliases) {
  return aliases.forEach(function (key, i) {
    return Object.defineProperty(arr, key, {
      enumerable: false,
      get: function get() {
        return this[i];
      }
    });
  });
};

var breakpoints = exports.breakpoints = [32, 40, 48, 64];

var mediaQueries = exports.mediaQueries = breakpoints.map(createMediaQuery);

var aliases = ['sm', 'md', 'lg', 'xl'];

addAliases(breakpoints, aliases);
addAliases(mediaQueries, aliases);

var space = exports.space = [0, 4, 8, 16, 32, 64, 128];

var font = exports.font = '\'Montserrat\',\'Helvetica Neue\',Helvetica,Arial,sans-serif';

var fontSizes = exports.fontSizes = [12, 14, 16, 20, 24, 32, 48];

var regular = exports.regular = 400;
var bold = exports.bold = 600;

// styled-system's `fontWeight` function can hook into the `fontWeights` object
var fontWeights = exports.fontWeights = {
  regular: regular,
  bold: bold
};

var letterSpacings = {
  normal: 'normal',
  caps: '0.025em'

  // color palette
};var black = '#000';
var white = '#fff';
var text = '#001833';
var lightBlue = '#cdf';
var blue = '#007aff'; // primary
var darkBlue = '#049';
var lightGray = '#f6f8fa';
var borderGray = '#d1d6db';
var gray = '#687B8E'; // primary
var darkGray = '#364049';
var lightGreen = '#cec';
var green = '#0a0'; // secondary
var darkGreen = '#060';
var lightRed = '#fcc';
var red = '#c00'; // secondary
var darkRed = '#800';
var lightOrange = '#feb';
var orange = '#fa0'; // secondary
var darkOrange = '#a50';
var lightPurple = '#ecf';
var purple = '#70b'; // secondary
var darkPurple = '#407';

// tints
var flatten = function flatten(name, colors) {
  return colors.reduce(function (a, b, i) {
    var color = _defineProperty({}, name + i, {
      enumerable: true,
      get: function get() {
        console.warn('Priceline Design System Warning: Using numbered colors like ' + [name + i] + ' will be deprecated in the next theme. Use light' + (name.charAt(0).toUpperCase() + name.slice(1)) + ', ' + name + ' or dark' + (name.charAt(0).toUpperCase() + name.slice(1)) + ' instead.');
        return b;
      }
    });
    return _extends({}, a, color);
  }, {});
};

var blues = [lightBlue, lightBlue, blue, blue];
var grays = [lightGray, lightGray, gray, gray];
var greens = [lightGreen, lightGreen, green, green];
var reds = [lightRed, lightRed, red, red];
var oranges = [lightOrange, lightOrange, orange, orange];
var purples = [lightPurple, lightPurple, purple, purple];

var colors = {
  black: black,
  white: white,
  text: text,
  blue: blue,
  lightBlue: lightBlue,
  darkBlue: darkBlue,
  gray: gray,
  lightGray: lightGray,
  borderGray: borderGray,
  darkGray: darkGray,
  green: green,
  lightGreen: lightGreen,
  darkGreen: darkGreen,
  red: red,
  lightRed: lightRed,
  darkRed: darkRed,
  orange: orange,
  lightOrange: lightOrange,
  darkOrange: darkOrange,
  purple: purple,
  lightPurple: lightPurple,
  darkPurple: darkPurple,
  blues: blues,
  greens: greens,
  reds: reds,
  oranges: oranges,
  purples: purples
};

Object.defineProperties(colors, _extends({}, flatten('blue', blues), flatten('gray', grays), flatten('green', greens), flatten('red', reds), flatten('orange', oranges), flatten('purple', purples)));

exports.colors = colors;

// styled-system's `borderRadius` function can hook into the `radii` object/array

var radii = exports.radii = [0, 2, 6];
var radius = exports.radius = '2px';

var maxContainerWidth = exports.maxContainerWidth = '1280px';

// boxShadows
var boxShadows = exports.boxShadows = ['0 0 2px 0 rgba(0,0,0,.08),0 1px 4px 0 rgba(0,0,0,.16)', '0 0 2px 0 rgba(0,0,0,.08),0 2px 8px 0 rgba(0,0,0,.16)', '0 0 2px 0 rgba(0,0,0,.08),0 4px 16px 0 rgba(0,0,0,.16)', '0 0 2px 0 rgba(0,0,0,.08),0 8px 32px 0 rgba(0,0,0,.16)'];

// animation duration
var duration = exports.duration = {
  fast: '150ms',
  normal: '300ms',
  slow: '450ms',
  slowest: '600ms'

  // animation easing curves
};var easeInOut = 'cubic-bezier(0.5, 0, 0.25, 1)';
var easeOut = 'cubic-bezier(0, 0, 0.25, 1)';
var easeIn = 'cubic-bezier(0.5, 0, 1, 1)';

var timingFunctions = {
  easeInOut: easeInOut,
  easeOut: easeOut,
  easeIn: easeIn

  // animation delay
};var transitionDelays = {
  small: '60ms',
  medium: '160ms',
  large: '260ms',
  xLarge: '360ms'
};

var theme = {
  breakpoints: breakpoints,
  mediaQueries: mediaQueries,
  space: space,
  font: font,
  fontSizes: fontSizes,
  fontWeights: fontWeights,
  letterSpacings: letterSpacings,
  regular: regular,
  bold: bold,
  colors: colors,
  radii: radii,
  radius: radius,
  boxShadows: boxShadows,
  maxContainerWidth: maxContainerWidth,
  duration: duration,
  timingFunctions: timingFunctions,
  transitionDelays: transitionDelays
};

exports.default = theme;